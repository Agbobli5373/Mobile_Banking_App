spring:
  application:
    name: mobile-banking-backend
  threads:
    virtual:
      enabled: true

  # Database configuration
  datasource:
    url: jdbc:h2:mem:mobilebanking
    driver-class-name: org.h2.Driver
    username: sa
    password: password
    # HikariCP connection pool configuration
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
      validation-timeout: 5000
      max-lifetime: 1200000
      leak-detection-threshold: 60000
      pool-name: MobileBankingHikariCP

  # JPA configuration
  jpa:
    hibernate:
      ddl-auto: validate # Changed to validate since we're using Flyway migrations
    show-sql: true
    properties:
      hibernate:
        "[format_sql]": true
        dialect: org.hibernate.dialect.H2Dialect
    open-in-view: false # Disable OSIV pattern for better performance

  # Flyway migration configuration
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true
    clean-disabled: true # Prevent accidental database cleaning

  # H2 Console (for development)
  h2:
    console:
      enabled: true
      path: /h2-console

# JWT configuration
jwt:
  secret: mySecretKey123456789012345678901234567890
  expiration: 86400000 # 24 hours in milliseconds
  validity:
    hours: 24

# Logging configuration (handled by logback-spring.xml)
logging:
  level:
    "[com.mobilebanking]": DEBUG
    "[org.springframework.security]": INFO
    "[org.hibernate.SQL]": INFO
    "[org.hibernate.type.descriptor.sql.BasicBinder]": INFO

# Server configuration
server:
  port: 8080
  servlet:
    context-path: /api

# Actuator configuration for health checks and metrics
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
  metrics:
    distribution:
      percentiles-histogram:
        "[http.server.requests]": true
      percentiles:
        "[http.server.requests]": 0.5, 0.95, 0.99
      slo:
        "[http.server.requests]": 100ms, 200ms, 500ms, 1s, 2s
  prometheus:
    metrics:
      export:
        enabled: true
  # OpenTelemetry tracing configuration
  tracing:
    sampling:
      probability: 0.1 # Sample 10% of traces

# OpenTelemetry configuration via environment variables and Spring Boot properties
# These properties are used by the OpenTelemetry Spring Boot starter
otel:
  service:
    name: mobile-banking-backend
  exporter:
    otlp:
      endpoint: ${OTEL_EXPORTER_OTLP_ENDPOINT:http://localhost:4317}
  traces:
    exporter: otlp
  metrics:
    exporter: none
  logs:
    exporter: none

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html

---
# Kubernetes profile configuration
spring:
  config:
    activate:
      on-profile: kubernetes

  # PostgreSQL configuration for Kubernetes
  datasource:
    url: jdbc:postgresql://${DB_HOST:postgres-service}:${DB_PORT:5432}/${DB_NAME:mobilebanking}
    driver-class-name: org.postgresql.Driver
    username: ${DB_USERNAME:mobilebanking}
    password: ${DB_PASSWORD:password}
    # Enhanced HikariCP configuration for production
    hikari:
      maximum-pool-size: 30
      minimum-idle: 10
      idle-timeout: 600000
      connection-timeout: 30000
      validation-timeout: 5000
      max-lifetime: 1800000
      leak-detection-threshold: 60000
      pool-name: MobileBankingHikariCP-K8s
      connection-test-query: SELECT 1

  # JPA configuration for PostgreSQL
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        "[format_sql]": false
    show-sql: false

# Enhanced observability configuration for Kubernetes
management:
  tracing:
    sampling:
      probability: 0.1
  prometheus:
    metrics:
      export:
        enabled: true

# OpenTelemetry configuration for Kubernetes
otel:
  service:
    name: mobile-banking-backend
  exporter:
    otlp:
      endpoint: ${OTEL_EXPORTER_OTLP_ENDPOINT:http://jaeger-collector:4317}
  traces:
    exporter: otlp
  metrics:
    exporter: none
  logs:
    exporter: none
# OpenTelemetry will be configured via environment variables in Kubernetes:
# OTEL_SERVICE_NAME=mobile-banking-backend
# OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger-collector:4317
# OTEL_TRACES_EXPORTER=otlp
